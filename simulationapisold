openapi: 3.0.0
info:
  description: |
    A totally awesome, complete, nearly magical set of APIs for pervaisive simulation in the context of computer aided engineering.
    [http:/api.ansys.com](http://swagger.io) 
  version: "1.0.0"
  title: The world's most awesome simulation APIs
  termsOfService: 'http://ansys.com/terms/'
  contact:
    email: apis@ansys.com
servers:
# Added by API Auto Mocking Plugin
  - description: Pervasive simulation rocks!
    url: https://virtserver.swaggerhub.com/donff2/Simulation/1.0.0
  - url: 'https://apis.ansys.com/v1'
tags:
  - name: mechanical
    description: Mechanical
  - name: fluids
    description: Cool stuff
  - name: electronics
    description: High and low frequency
  - name: semiconductors
    description: Self-describing
  - name: materials
    description: Materials stuff
  - name: optics
    description: Optics stuff
  - name: gasturbine
    description: Gas Turbine, multi-physics automated design processes
  - name: autonomous
    description: Autonomous vehicle and assisted driving worlflows.
paths:
  /mechanical:
    post:
      tags:
        - mechanical
      summary: Create a mechanical simulation simulation
      operationId: addmechanical
      responses:
        '405':
          description: Invalid input
      security:
        - mechanicalstore_auth:
            - 'write:mechanicals'
            - 'read:mechanicals'
      requestBody:
        $ref: '#/components/requestBodies/mechanical'
    put:
      tags:
        - mechanical
      summary: Update an existing mechanical solution
      operationId: updatemechanical
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: mechanical not found
        '405':
          description: Validation exception
      security:
        - mechanicalstore_auth:
            - 'write:mechanicals'
            - 'read:mechanicals'
      requestBody:
        $ref: '#/components/requestBodies/mechanical'
  '/mechanical/{solution_name}':
    get:
      tags:
        - mechanical
      summary: Find mechanical solution by name
      description: Returns a URL to solution
      operationId: getmechanicalById
      parameters:
        - name: mechanicalId
          in: path
          description: ID of mechanical to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mechanical'
            application/xml:
              schema:
                $ref: '#/components/schemas/mechanical'
        '400':
          description: Invalid ID supplied
        '404':
          description: mechanical not found
      security:
        - api_key: []
    put:
      tags:
        - mechanical
      summary: Updates a mechanical solutions properties
      operationId: updatemechanicalWithForm
      parameters:
        - name: mechanicalId
          in: path
          description: ID of mechanical that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - mechanicalstore_auth:
            - 'write:mechanicals'
            - 'read:mechanicals'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the mechanical
                  type: string
                status:
                  description: Updated status of the mechanical
                  type: string
    delete:
      tags:
        - mechanical
      summary: Deletes a mechanical
      operationId: deletemechanical
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: mechanicalId
          in: path
          description: mechanical id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: mechanical not found
      security:
        - mechanicalstore_auth:
            - 'write:mechanicals'
            - 'read:mechanicals'
  '/mechanical/{solution}/boundary_conditions':
    post:
      tags:
        - mechanical
      summary: Adds boundary conditions
      operationId: uploadFile
      parameters:
        - name: mechanicalId
          in: path
          description: ID of mechanical to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - mechanicalstore_auth:
            - 'write:mechanicals'
            - 'read:mechanicals'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  '/mechanical/{solution}/analysys':
    post:
      tags:
        - mechanical
      summary: Adds boundary conditions
      operationId: uploadFile
      parameters:
        - name: mechanicalId
          in: path
          description: ID of mechanical to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - mechanicalstore_auth:
            - 'write:mechanicals'
            - 'read:mechanicals'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  '/mechanical/{solution}/other_cool_stuff':
    post:
      tags:
        - mechanical
      summary: Adds boundary conditions
      operationId: uploadFile
      parameters:
        - name: mechanicalId
          in: path
          description: ID of mechanical to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - mechanicalstore_auth:
            - 'write:mechanicals'
            - 'read:mechanicals'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of mechanical that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Ansys
  url: 'http://swagger.io'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        mechanicalId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    mechanical:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: mechanical status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: mechanical
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    mechanical:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/mechanical'
        application/xml:
          schema:
            $ref: '#/components/schemas/mechanical'
      description: mechanical object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    mechanicalstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://mechanicalstore.swagger.io/oauth/dialog'
          scopes:
            'write:mechanicals': modify mechanicals in your account
            'read:mechanicals': read your mechanicals
    api_key:
      type: apiKey
      name: api_key
      in: header